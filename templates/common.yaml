apiVersion: v1
kind: Namespace
metadata:
  name: emby
  labels:
    name: emby
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: emby-config-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: "{{ .Values.ConfigSize }}"
  persistentVolumeReclaimPolicy: Retain
  accessModes:
  - ReadWriteMany
  hostPath:
    path: "{{ .Values.HostConfigPath }}"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: emby-media-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: "{{ .Values.MediaSize }}"
  persistentVolumeReclaimPolicy: Retain
  accessModes:
  - ReadWriteMany
  hostPath:
    path: "{{ .Values.HostMediaPath }}"
---
# NFS mount
#apiVersion: v1
#kind: PersistentVolume
#metadata:
#  name: emby-media-pv
#spec:
#  capacity:
#    storage: "{{ .Values.MediaSize }}"
#  volumeMode: Filesystem
#  accessModes:
#    - ReadWriteMany
#  persistentVolumeReclaimPolicy: Recycle
#  storageClassName: nfs
#  mountOptions:
#    - hard
#    - nfsvers=4.1
#  nfs:
#    path: "{{ .Values.HostMediaPath }}"
#    server: "{{ .Values.ServerMediaIP }}"
#---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: emby-config-pvc
  namespace: emby
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteMany
  volumeName: emby-config-pv
  resources:
    requests:
      storage: "{{ .Values.ConfigSize }}"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: emby-media-pvc
  namespace: emby
spec:
  storageClassName: manual
  accessModes:
  - ReadWriteMany
  volumeName: emby-media-pv
  resources:
    requests:
      storage: "{{ .Values.MediaSize }}"
---
# NFS mount
#kind: PersistentVolumeClaim
#metadata:
#  name: emby-media-pvc
#  namespace: emby
#spec:
#  storageClassName: nfs
#  accessModes:
#    - ReadWriteMany
#  resources:
#    requests:
#      storage: 200Gi
#---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: emby-deploy
  namespace: emby
spec:
  template:
    metadata:
      name: emby-app
      labels: 
        name: emby-app
    spec:
      volumes:
        - name: emby-media-storage
          persistentVolumeClaim:
            claimName: emby-media-pvc
        - name: emby-config-storage
          persistentVolumeClaim:
            claimName: emby-config-pvc
      containers:
      - name: emby
        image: 19780529/embyserver:1.1
        imagePullPolicy: IfNotPresent
        env:
        - name: TZ
          value: Europe/Moscow
        - name: UID
          value: "1000"
        - name: GID
          value: "100"
        - name: GIDLIST
          value: "100"
        volumeMounts:
        - name: emby-config-storage
          mountPath: "/config/"
        - name: emby-media-storage
          mountPath: "/data/"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 0
  replicas: 1 
  selector:
    matchLabels:
      name: emby-app
---
apiVersion: v1
kind: Service
metadata:
  name: emby-service
  namespace: emby
spec:
  selector:
    name: emby-app
  ports: 
  - name: emby-web
    protocol: TCP
    port: 8096
    targetPort: 8096
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  name: emby-web-ingress
  namespace: emby
spec:
  rules:
  - host: "{{ .Values.FQDN }}"
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: emby-service
            port:
              number: 8096
  tls:
  - hosts:
    - "{{ .Values.FQDN }}"
    secretName: app-emby-tls